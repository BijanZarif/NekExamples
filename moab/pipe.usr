C-----------------------------------------------------------------------
C
C  USER SPECIFIED ROUTINES:
C
C     - boundary conditions
C     - initial conditions
C     - variable properties
C     - forcing function for fluid (f)
C     - forcing function for passive scalar (q)
C     - general purpose routine for checking errors etc.
C
C-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)

C Set user variable properties

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      return
      end

C=======================================================================

      subroutine userf  (ix,iy,iz,ieg)

C Set user forcing function for the momentum

      include 'SIZE'
      include 'TSTEP'
      include 'NEKUSE'

      FFY = 0.0
      FFX = 0.0
      FFZ = 0.0

      return
      end

C=======================================================================

      subroutine userq  (ix,iy,iz,ieg)

C Set user forcing function for scalars

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      qvol = 0.0

      return
      end

C=======================================================================
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'

#ifdef MOAB
      call usr_moab_output()
#endif

      return
      end

C=======================================================================

      subroutine userbc (ix,iy,iz,iside,ieg)

C  Set user boundary conditions

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      xp  = x/0.5
      yp  = y/0.5
      rr  = xp*xp + yp*yp

      ux = 0.0
      uy = 0.0
      uz = 1 - rr
      temp = 0.0 

      return
      end

C=======================================================================

      subroutine useric (ix,iy,iz,ieg)

C   Set initial conditions

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      xp  = x/0.5
      yp  = y/0.5
      rr  = xp*xp + yp*yp

      ux = 0.0
      uy = 0.0
      uz = 1 - rr
      temp = 0.0 

      return
      end

C=======================================================================
      subroutine usrdat

      return
      end

C=======================================================================

      subroutine usrdat2

      return
      end

C=======================================================================
      subroutine usrdat3

      return
      end
C=======================================================================
#ifdef MOAB
      subroutine usr_moab2nek(id_nek, id_moab)

      character*3 id_nek(1)
      integer id_moab

      id_nek(1) = 'E  '
      if     (id_moab.eq.100) then
         id_nek(1) = 'v  '
      else if(id_moab.eq.200) then
         id_nek(1) = 'O  '
      else if(id_moab.eq.300) then
         id_nek(1) = 'W  '
      endif

      return
      end

      subroutine usr_moab_output()

      common /nekmpi/ nid_,np,nekcomm,nekgroup,nekreal
      integer nekcomm, nekgroup, nekreal, nid_, np

#define IMESH_ASSERT \
      if (ierr.ne.0) call imesh_err(ierr,imeshh,'pipe.f ',__LINE__)

#ifdef PTRSIZE8
#define IMESH_HANDLE integer*8
#else
#define IMESH_HANDLE integer*4
#endif

#include "NEKMOAB"
      include 'TSTEP'
      include 'SOLN'
      include 'GEOM'

      integer iten, ione, ierr
      CHARACTER*10 NAME
      CHARACTER*132 options
      CHARACTER*1   NAM1(10)
      EQUIVALENCE  (NAME,NAM1)
      CHARACTER*1  NUMRL(0:9)
      DATA NUMRL          /'0','1','2','3','4','5','6','7','8','9'/
      data options /''/
      data name /'pipe00.h5m'/

c name the output files 'zero??.h5m'      
      iten = istep / 10
      ione = MOD(istep,10)
      nam1(5) = numrl(iten)
      nam1(6) = numrl(ione)

c #define MOAB_MEM
#ifndef MOAB_MEM

c copy data from nek
      do l = 1, nelv
         do k = 1, nz1
            do j = 1, ny1
               do i = 1, nx1
                  tl(i,j,k,l,1) = t(i,j,k,l,1)
                  xm1l(i,j,k,l) = xm1(i,j,k,l)
                  ym1l(i,j,k,l) = ym1(i,j,k,l)
                  zm1l(i,j,k,l) = zm1(i,j,k,l)
                  vxl(i,j,k,l) = vx(i,j,k,l)
                  vyl(i,j,k,l) = vy(i,j,k,l)
                  vzl(i,j,k,l) = vz(i,j,k,l)
               enddo
            enddo
         enddo
      enddo
      if (nx2.eq.nx1 .and. ny2.eq.ny1 .and. nz2.eq.nz1) then
         do l = 1, lelt
            do k = 1, nz1
               do j = 1, ny1
                  do i = 1, nx1
                     prl(i,j,k,l) = pr(i,j,k,l)
                  enddo
               enddo
            enddo
         enddo
      endif
#endif

      if(mod(istep,iostep) .eq. 0) then
         call iMesh_save(%VAL(imeshh),%VAL(rootset),name,options, ierr)
c no check for error, just print something and continue
         if (ierr .ne. 0 .and. nid_ .eq. 0) then
            write(6, "('      H5M file write failed on step ', i4)") 
     *           istep
         else if (nid_ .eq. 0) then
            write(6, "('      Wrote MOAB H5M file for step ', i4)") 
     *           istep
         endif
      endif

      return
      end
#endif
c-----------------------------------------------------------------------
c automatically added by nekautomake
      subroutine usrsetvert(glo_num,nel,nx,ny,nz) ! to modify glo_num
      integer*8 glo_num(1)
      return
      end
c
